<?xml version="1.0" encoding="utf-8"?>
<!-- 
  Novo Nordisk Player for 23 Video
-->
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:com="com.*" 
	xmlns:visual="com.visual.*"
	layout="absolute" 
	verticalScrollPolicy="off" 
	horizontalScrollPolicy="off"
	backgroundAlpha="0"
	width="100%" 
	height="100%" 
	applicationComplete="init();"
	usePreloader="false"
	xmlns:controls="com.saifx.controls.*"
	>
 	<mx:Script source="Utility.as"></mx:Script>
 	<mx:Script source="Fullscreen.as"></mx:Script>
 	<mx:Script source="Identity.as"></mx:Script>
 	<mx:Script source="AppProperties.as"></mx:Script>
 	<mx:Script source="ActiveElement.as"></mx:Script>
 	<mx:Script source="doJSON.as"></mx:Script>
	<mx:Script>
		<![CDATA[
			import com.PlayList;
			import com.PlayListEvent;
			import com.PlayerButton;
			import com.SmoothImage;
			import com.adobe.serialization.json.JSONParseError;
			import com.philemonworks.flex.util.HashCollection;
			import com.visual.VisualAds;
			
			import flash.display.StageDisplayState;
			import flash.external.ExternalInterface;
			import flash.utils.setInterval;
			import flash.utils.setTimeout;
			
			// Default domain (used when testing from localhost)
			private var defaultDomain:String = 'video.novonordisk.com';
			// Default photo_id (used to if you want a specific photo/video to be shown, otherwise empty)
			private var defaultPhotoId:String = '';
			private var defaultAlbumId:String = '';
			private var playerId:String = '0';

			private var context:Object = {};
			private var recommendations:Object = {};
			
			private var playList: PlayList;
			[Bindable] private var enablePlayList: Boolean = false;		
			[Bindable] private var showPlayList: Boolean = false;
			[Bindable] private var cleanVideoState:String = 'paused';
			[Bindable] private var applicationLoaded:Boolean = false;
			public var ads = null;
			public var forceHideTray:Boolean = false;
			
			public function init():void {
				prepareTimers();
				flash.system.Security.allowDomain('*');
				try {
					var objectID:String = new String(ExternalInterface.objectID);
					if (ExternalInterface.available && (objectID.length>0 && objectID!='null')) {
						ExternalInterface.addCallback('unloadVideoPlayer', function():void {unload();});
						ExternalInterface.addCallback('pauseVideo', function():void {pauseVideoElement();});
						ExternalInterface.addCallback('playVideo', function():void {playVideoElement();});
						ExternalInterface.addCallback('getPlayState', function():String {return(cleanVideoState);});
						ExternalInterface.addCallback('getPlayheadTime', function():Object {return(video.playheadTime + activeElement.getNumber('start'));});
						ExternalInterface.addCallback('setPlayheadTime', function(time:int):void {progress.seekVideoTo(time);});
						ExternalInterface.addCallback('getTotalTime', function():Object {return(video.totalTime);});
						ExternalInterface.addCallback('getCurrentPhotoID', function():Object {return(activeElement.get('photo_id'));});
						ExternalInterface.addCallback('getJSONSource', function():Object {return(props.get('jsonSource'));});
						ExternalInterface.addCallback('echo', function(x:Object):Object {return(x);});
					}
		        } catch (e:SecurityError) {} catch(e:Error) {}
				load();
			}
			public function unload():void {
				// This function is triggered via ExternalInterface and some JavaScript because Flex is useless.
				try {if(video.playing) video.pause();} catch(e:Error){}
				try {if(video.playing) reportPlay('end', video.playheadTime)} catch(e:Error){}
			}
			public function load():void {
				// Are we using a specific player, or just the default? (if so, we want to specify the player id to get the correct video settings)
				var testCustomPlayer:Array = new RegExp('/([0-9]+)\.swf').exec(FlexGlobals.topLevelApplication.url);
				if (testCustomPlayer && testCustomPlayer.length>1) playerId = testCustomPlayer[1]; 
				
				// Mash up embed parameters, including .swf?..., Flashvars, width and height to get a good embed code   
				var a:Array = []; var v:String;
				for (v in FlexGlobals.topLevelApplication.parameters) {a.push(encodeURIComponent(v) + '=' + encodeURIComponent(FlexGlobals.topLevelApplication.parameters[v]));}
				a.push('width=' + encodeURIComponent(FlexGlobals.topLevelApplication.width));
				a.push('height=' + encodeURIComponent(FlexGlobals.topLevelApplication.height));
				
				// Get settings for this player from 23 Video
				initLoadURL();
				doAPI('/api/player/settings', {player_id:(playerId?playerId:''), parameters:a.join('&')}, function(o:Object):void{
					initProperties(o.settings);
				});
				// Load content
				initActiveElement();
				doJSON((props.get('jsonSource') as String), function(o:Object):void{
					context=o; 
					build();
				});
			}
			public function build():void {
				if(!prioritizeLiveStreams && context && context.photos && context.photos.length>0) setActiveElement(0, false, props.getNumber('start'));
				
				if (props.get('showTray') && props.get('showBrowse')) {
					// Generate the recommendation playlist
					var recommendationSource:String = getRecommendationSource();
					if(recommendationSource==props.get('jsonSource')) {
						// The list displays all the items in the feed
						recommendations=context; createPlayList();
					} else {
						// The list consists of recommendations, we'll need to load them
						// Loading is deferred for a few seconds if browseMode isn't on 
						setTimeout(function():void {
							try {
								doJSON(recommendationSource, function(o:Object):void{recommendations=o; createPlayList();});
					        } catch(e:JSONParseError) {enablePlayList = false; props.put('showShare', false);}
						}, (props.getBoolean('browseMode') ? 0 : 5000));
					}
				}
				applicationLoaded = true;
			}
			
            private function createPlayList():void  {
            	var arr:Array = createItemsArray(recommendations);
            	if(arr.length<=1) return;
				enablePlayList = true;
				playListHolder.removeAllChildren(); // if we've done this before, clean up after ourselves.
            	playList = new PlayList();
            	playList.width = playListContainer.width;
            	playList.verticalScrollPolicy = "off";
				playList.itemArray = arr;
				playList.addEventListener(PlayListEvent.SELECT_ITEM, function(evt:PlayListEvent):void {
						// When clicking the recommendation playlist, we shift context -- it's no longer the initially selected video, but the playlist objects
						context = recommendations;
						if(evt.itemID>=0) {
							if(props.get('playlistClickMode')=='link') {
								if (context.photos.length>evt.itemID) {
									var o:Object = context.photos[evt.itemID];
									goToUrl(o.one);
								}
							} else {
            					playListHide();
            					setElementByID(evt.itemID, true);
							}
            			}
            		});
				playListHolder.addChild(playList);
				
				if(props.get('browseMode')) {
					showPlayList = true;
				}
            }
			private function playListShow():void {
				if (!props.get('showTray') || !props.get('showBrowse')) return;
				hidePopups();
				showPlayList = true;
            }
			private function playListHide():void {
				showPlayList = false;
			}
			private function playListToggle():void {
				if(showPlayList) {
					playListHide();	
				} else {
					playListShow();	
				}
			}
            private function prepareTimers():void {
				// Reset timer when the mouse moves in the application
				stage.addEventListener(Event.MOUSE_LEAVE, function():void {
					if(!descriptions.visible && !embedPanel.visible && !showPlayList) tray.visible = false; 
				});
				stage.addEventListener(MouseEvent.MOUSE_MOVE, function():void {tray.visible=true;});

				// PLAY EVENTS
				// Report plays back to analytics continously
				setInterval(function():void{
						try {
							if(video.playing) reportPlay('start', video.playheadTime);
						}catch(e:ErrorEvent){}
					}, 30000);
            }             
            private function infoHide():void {
				descriptions.visible = false;
            }
            private function infoShow(timeout:Boolean=true):void {
            	if(!activeElement.get('hasInfo') || !props.get('showDescriptions')) {descriptions.visible = false; return;}
				trace('trayContent.height = ' + trayContent.height);
				hidePopups();
				descriptions.visible = true;
            }
            private function infoToggle():void {				
				if(descriptions.visible) infoHide();
				else infoShow(false); // no timeout, since this a manual action
            }
            private function onPlayListDone():void {
            	if(props.get('loop')) { 
            		load();
            	} else {
            		if (playList) playListShow();
            	}
            }
			private function onVideoStateChange(evt:Event):void {
				if(evt.currentTarget.state==VideoEvent.PLAYING || evt.currentTarget.state==VideoEvent.SEEKING) {
					if(ads) ads.overlay();
					hidePopups();
					cleanVideoState = 'playing';
				} else if(evt.currentTarget.state==VideoEvent.LOADING || evt.currentTarget.state==VideoEvent.BUFFERING) {
					cleanVideoState = 'buffering';
				} else if(evt.currentTarget.state==VideoEvent.DISCONNECTED || evt.currentTarget.state==VideoEvent.COMPLETE || evt.currentTarget.state==VideoEvent.PAUSED || evt.currentTarget.state==VideoEvent.STOPPED) {
					cleanVideoState = 'paused';
				}
                switch (evt.currentTarget.state) {
                	case VideoEvent.PAUSED:
						reportPlay('end', video.playheadTime);
						break;
                	case VideoEvent.PLAYING:
						image.visible = false;
						reportPlay('start', video.playheadTime);
                		break;
                    case VideoEvent.CONNECTION_ERROR:
                        displayError('Unable to connect to video');
                        break;
                }
            }
            private function onVideoComplete(ignoreIdentity:Boolean=false):void {
				reportPlay('end', video.playheadTime);
     			if(!ignoreIdentity) return(handleIdentity('after', function():void {onVideoComplete(true);}));
            	if(props.get('loop')) {
            		var more:Boolean = nextElement();
            		if(!more) onPlayListDone();
            	} else {
            		onPlayListDone();
            	}
            }
            private function onPlayListResize():void {
            	var c:Array = playListHolder.getChildren();
            	if (c.length) c[0].width = playListContainer.width;
            }
            private function onTrayResize():void {
            	resizeProgressBar();
            }
            private function resizeProgressBar():void {
            	var x:int = progress.x = (videoControls.visible ? videoControls.width : 0) + 4; 
            	progress.width = tray.width - (rightPanel.width + 4) - x; 
            }
			
			private function hidePopups():void {
				infoHide();
				playListHide();
				embedPanel.visible=false;
				
			}
		]]>
	</mx:Script>	
	
	<!-- Simple element to provide a backdrop when everything else fails -->
	<mx:Label id="errorContainer" 
		color="white"
		/>
	
	<mx:Canvas id="contentContainer"
		x="{props.getNumber('horizontalPadding')/2}"
		y="0"
		width="{FlexGlobals.topLevelApplication.width-props.getNumber('horizontalPadding')}"
		height="{FlexGlobals.topLevelApplication.height-props.getNumber('verticalPadding')}"
		verticalScrollPolicy="off"
		horizontalScrollPolicy="off"
		>
	<!-- Click Container when wmode='direct' -->
	<mx:Canvas 
		top="0" right="0" bottom="0" left="0"
		click="playListHide(); if(video.playing) pauseVideoElement(); else playVideoElement();"
		/>
	<!-- Image and Video -->
	<visual:VisualVideo id="video"
		volume="1" 
		horizontalCenter="0" 
		verticalCenter="0" 
		bufferTime="10"
		width="100%"
		height="100%"
		click="playListHide(); if(video.playing) pauseVideoElement(); else playVideoElement();" 
		stateChange="onVideoStateChange(event);"
		complete="onVideoComplete();"
		/>
	<com:SmoothImage id="image" 
		source="{activeElement.get('photoSource')}" 
		width="{(contentContainer.width/contentContainer.height>activeElement.get('aspectRatio') ? video.height*(activeElement.get('aspectRatio') as Number) : contentContainer.width)}"
		height="{(contentContainer.width/contentContainer.height>activeElement.get('aspectRatio') ? contentContainer.height : contentContainer.width/(activeElement.get('aspectRatio') as Number))}"
		horizontalCenter="0" 
		verticalCenter="0"
		click="{playListHide(); playVideoElement()}" 
		/>

 	 <!-- Big Play -->
	<mx:Image id="bigPlayImage" 
		source="@Embed(source='assets/buttons/bigplay.png')"
		verticalCenter="0" 
		horizontalCenter="0" 
		visible="{(applicationLoaded &amp;&amp; (props.get('showBigPlay') as Boolean) &amp;&amp; cleanVideoState=='paused' &amp;&amp; !identityVideo.playing)}" 
		click="playVideoElement()"
		alpha="0.6"
		buttonMode="true"
		useHandCursor="true"
		/>
 	
	<!-- Extra displays for identity video and photo -->
	<visual:VisualVideo id="identityVideo" 
		visible="false" 
		volume="1" 
		horizontalCenter="0" 
		verticalCenter="0" 
		bufferTime="2" 
		width="{video.width}" 
		height="{video.height}"
		buttonMode="true"
		enableStageVideo="false"
		playheadUpdate="{var secs:int=Math.round(identityVideo.totalTime-identityVideo.playheadTime); var mess:String = (secs!=1 ? props.getString('identityCountdownTextPlural') : props.getString('identityCountdownTextSingular')); identityMessage.message = mess.replace(/%/, secs);}"
		/>
	<com:SmoothImage id="identityPhoto" 
		visible="false" 
		horizontalCenter="0" 
		verticalCenter="0" 
		maxWidth="{contentContainer.width}" 
		maxHeight="{contentContainer.height}" 
		buttonMode="true"
		/>
	<com:OverlayMessage id="identityMessage"
		fontFamily="{props.get('trayFont')}" 
		color="{(styleManager.getColorName(props.get('trayTextColor')) as Number)}" 
		backgroundColor="{(styleManager.getColorName(props.get('trayBackgroundColor')) as Number)}" 
		visible="{props.get('identityCountdown') &amp;&amp; identityVideo.visible}"
		allowClose="{props.get('identityAllowClose')}"
		close="{identityVideo.stop(); reportEvent(currentIdentityEvent=='after' ? 'postRollClose ' : 'preRollClose'); identityVideo.dispatchEvent(new Event('complete', true));}"
		/>
	<com:PlayerSubtitles id="subtitles"
		 width="{this.width}"
		 height="{this.height}"
		 x="0"
		 y="0"
		 targetVideo="{video}"
		 visible="{video.visible}"
		 design="{props.get('subtitlesDesign')}"
		 />

	</mx:Canvas> 

	<mx:Canvas id="visualAdContainer" 
			   horizontalScrollPolicy="off"
			   verticalScrollPolicy="off"
			   clipContent="true"
			   width="100%" 
			   height="{(tray.visible ? tray.y+(descriptions.visible?0:descriptions.height) : FlexGlobals.topLevelApplication.height)}" /> 
	<com:OverlayMessage id="adMessage"
			   fontFamily="{props.get('trayFont')}" 
			   color="{(styleManager.getColorName(props.get('trayTextColor')) as Number)}" 
			   backgroundColor="{(styleManager.getColorName(props.get('trayBackgroundColor')) as Number)}" 
			   allowClose="{props.get('identityAllowClose')}"
			   visible="false"
			   />

	
	<mx:VBox id="descriptions"
		bottom="40"
		horizontalScrollPolicy="off" 
		verticalScrollPolicy="off" 
		fontFamily="Verdana, Helvetica, Arial, sans-serif;" 
		backgroundColor="white"
		backgroundAlpha=".9"
		width="100%"
		visible="false"
		paddingTop="20"
		paddingRight="45"
		paddingBottom="20"
		paddingLeft="40"
		verticalGap="15"
		>
			<!-- Title and Words -->
			<mx:Label id="trayTitle" 
				fontSize="14"
				color="black"
				text="{activeElement.get('title')}" 
				truncateToFit="true" 
				width="100%"
				/>
		<mx:VBox width="100%" verticalGap="0">
			<mx:Canvas
				width="100%"
				height="{trayContent.height}"
				clipContent="true"
				>
				<controls:TextAdv 
						 id="trayContent" 
						 fontSize="13"
						 color="#666666"
						 htmlText="{activeElement.get('content')}" 
						 truncateToFit="true" 
						 width="100%"
						 maxHeight="60"
						 />
			</mx:Canvas>
			<mx:Text id="readMore" 
					 fontSize="13"
					 color="#009FD9"
					 text="Read more" 
					 width="100%"
					 visible="{trayContent.height==trayContent.maxHeight}"
					 includeInLayout="{trayContent.height==trayContent.maxHeight}"
					 click="{video.pause(); goToUrl(activeElement.getString('link') + '?start=' + (Math.floor(Math.round(activeElement.getNumber('start') + video.playheadTime))), '_new');}"
					 useHandCursor="true"
					 buttonMode="true"
					 selectable="false"
					 />
		</mx:VBox>
	</mx:VBox>

	<!-- PlayList -->
	
	<com:TextPanel id="playListContainer"
		headlineSource="@Embed('assets/buttons/videos-headline.png')"
		visible="{showPlayList}"
		>
		<mx:Canvas id="playListHolder" 
			resize="onPlayListResize()"
			/>
	</com:TextPanel>					

	
	<!-- Tray -->
	<mx:Canvas id="tray" 
		bottom="0" 
		height="40"
		width="100%"
		horizontalScrollPolicy="off" 
		verticalScrollPolicy="off" 
		resize="onTrayResize();" 
		horizontalCenter="0"
		hideEffect="fadeOut"
		showEffect="fadeIn"
		>
		<mx:Image source="@Embed(source='assets/buttons/tray-background.png')" maintainAspectRatio="false" width="100%" height="40"  alpha=".75" />
			
					<!-- Play and Pause -->
					<mx:HBox id="videoControls" 
						bottom="0" 
						top="0" 
						left="0" 
						width="43"
						hasFocusableChildren="true"
						resize="resizeProgressBar();">
			    		<com:PlayerButton id="playImage" 
			    			imageSource="@Embed(source='assets/buttons/play.png')"
			    			visible="{(cleanVideoState=='paused' &amp;&amp; !identityVideo.visible)}" 
			    			click="playVideoElement()"
							hasBorder="false"
							hasHover="false"
							width="43"
			    			/>
			    		<com:PlayerButton id="pauseImage" 
			    			imageSource="@Embed(source='assets/buttons/pause.png')"
			    			visible="{(cleanVideoState=='playing' &amp;&amp; !identityVideo.visible)}" 
			    			click="pauseVideoElement()"
							hasBorder="false"
							hasHover="false"
							width="43"
			    			/>
			    		<com:PlayerButton id="bufferImage"  
			    			imageSource="@Embed(source='assets/buttons/pause.png')"
			    			visible="{(cleanVideoState=='buffering' &amp;&amp; !identityVideo.visible)}" 
							hasBorder="false"
							hasHover="false"
							width="43"
			    			/>  
			    	</mx:HBox>					
						
					<!-- Progress bar -->
					<com:PlayerProgress id="progress"
						targetVideo="{video}"
						visible="{!activeElement.getBoolean('live') &amp;&amp; !identityVideo.visible}" 
						/>

					<!-- Right Panel -->
			    	<mx:HBox id="rightPanel" 
			    		visible="true" 
			    		bottom="0" 
			    		top="0" 
			    		right="0" 
			    		horizontalGap="0" 
			    		resize="resizeProgressBar();"
			    		> 
						<!-- PlayListBtn -->
			    		<com:PlayerButton id="playlistBtn" 
			    			imageSource="@Embed(source='assets/buttons/playlist.png')"
			    			visible="{enablePlayList}"
							activated="{showPlayList}"
			    			click="playListToggle()"
			    			/>

						<!-- InfoBtn -->
						<com:PlayerButton id="infoImage" 
										  imageSource="@Embed(source='assets/buttons/info.png')"
										  visible="{(activeElement.get('hasInfo') as Boolean) &amp;&amp; (props.get('showDescriptions') as Boolean)}" 
										  click="infoToggle();"
										  activated="{descriptions.visible}"
										  />
					    <!-- HDbutton-->
			    		<com:PlayerButton id="hdBtn" 
			    			imageSource="@Embed(source='assets/buttons/hd.png')"
							click="{switchVideoFormat(currentVideoFormat=='video_hd' ? 'video_medium' : 'video_hd');}"
							activated="{currentVideoFormat=='video_hd'}"
			    			>
						</com:PlayerButton>

						<!-- Mute and Unmute -->
			    		<com:PlayerButton id="muteImage"
			    			imageSource="@Embed(source='assets/buttons/unmute.png')"
			    			visible="{videoControls.visible &amp;&amp; video.volume>0}" 
			    			click="video.volume=0"
			    			/>
			    		<com:PlayerButton id="unmuteImage"
			    			imageSource="@Embed(source='assets/buttons/mute.png')"
			    			visible="{videoControls.visible &amp;&amp; video.volume==0}" 
			    			click="video.volume=1"
			    			/>

						<!-- Fullscreen -->
			    		<com:PlayerButton id="fullscreenImage" 
			    			imageSource="@Embed(source='assets/buttons/fullscreen.png')"
			    			activated="{inFullScreen}" 
			    			click="toggleFullScreen()"
			    			/>

						<!-- FeedPanel -->
			    		<com:PlayerButton id="feedpanelBtn" 
			    			imageSource="@Embed(source='assets/buttons/share.png')"
			    			visible="{(props.get('showShare') as Boolean)}" 
			    			click="var v:Boolean = embedPanel.visible; hidePopups(); embedPanel.visible=props.get('showShare') &amp;&amp; !v;"
							activated="{embedPanel.visible}"
			    			/>
					</mx:HBox>
			
	</mx:Canvas>
	
	<!-- Embed panel -->
	<com:TextPanel id="embedPanel" 
		headlineSource="@Embed('assets/buttons/share-headline.png')"
		show="{reportEvent('shareEngaged');}"
		>

		<!-- Embed section -->		
		<mx:Canvas 
			width="566"
			height="81"
			clipContent="true"
			horizontalScrollPolicy="off"
			verticalScrollPolicy="off"
			horizontalCenter="0"
			>
			<mx:Image 
				source="@Embed('assets/buttons/share-embed.png')"
				/>
			<mx:Image
				y="32"
				width="566"
				height="39"
				maintainAspectRatio="false"
				source="@Embed('assets/buttons/embed-background.png', scaleGridTop='19', scaleGridBottom='20', scaleGridLeft='100', scaleGridRight='110')"
				/>
			<mx:TextArea id="embedText"
				y="32"
				paddingTop="8"
				paddingBottom="5"
				paddingLeft="7"
				backgroundAlpha="0"
				backgroundSize="561"
				height="36"
				width="100%"
				text="{props.get('currentVideoEmbedCode')}" 
				click="{reportEvent('embedEngaged'); embedText.setFocus(); embedText.selectionBeginIndex = 0; embedText.selectionEndIndex = embedText.text.length;}" 
				color="#333" 
				fontSize="13"
				borderStyle="none"
				/>
		</mx:Canvas>

		<mx:Canvas
			width="100%"
			borderColor="#e9ebeb"
			borderStyle="solid"
			borderSides="top"
			borderThickness="1"
			/>
		<!-- Share section -->		
		<mx:HBox 
			horizontalGap="43"
			verticalAlign="bottom"
			visible="{(props.get('showShare') as Boolean)}"
			width="566"
			paddingTop="14"
			clipContent="true"
			horizontalScrollPolicy="off"
			verticalScrollPolicy="off"
			>
			<mx:Image 
				source="@Embed(source='assets/buttons/share-facebook.png')"
				visible="{props.get('socialSharing') &amp;&amp; activeElement.get('link')!=''}"
				click="{goToUrl(activeElement.get('link') + '/facebook?player_id=' + props.get('player_id'))}"
				/>
			<mx:Image 
				source="@Embed(source='assets/buttons/share-twitter.png')"
				visible="{props.get('socialSharing') &amp;&amp; activeElement.get('link')!=''}"
				click="{goToUrl(activeElement.get('link') + '/twitter?player_id=' + props.get('player_id'))}"
				/>
			<mx:Image 
				source="@Embed(source='assets/buttons/share-linkedin.png')"
				visible="{props.get('socialSharing') &amp;&amp; activeElement.get('link')!=''}"
				click="{goToUrl(activeElement.get('link') + '/linkedin?player_id=' + props.get('player_id'))}"
				/>
			<mx:Image 
				source="@Embed(source='assets/buttons/share-rss.png')"
				visible="{props.get('rssLink')!=''}"
				click="{goToUrl(props.get('rssLink') as String)}"
				/>
			<mx:Image 
				source="@Embed(source='assets/buttons/share-podcast.png')"
				visible="{props.get('podcastLink')!=''}"
				click="{goToUrl(props.get('podcastLink') as String)}"
				/>
		</mx:HBox>
	</com:TextPanel>
	<!-- /Embed panel -->

	<!-- Text panel for post-roll html identity text -->
	<com:TextPanel id="identityPanel" 
		>
		<mx:TextArea id="identityPanelText"
			width="100%"
			height="{(this.height-100)*0.9}" 
			backgroundAlpha="0" 
			borderStyle="none"
			fontSize="12" 
			editable="false" 
			color="white"
			paddingTop="10" 
			paddingBottom="20"
			click="{reportEvent('callToActionClick');}"
			/>
		<mx:HBox 
			visible="{(props.get('showShare') as Boolean)}"
			width="100%"
			paddingTop="10" 
			borderColor="#666666"
			borderStyle="solid"
			borderSides="top"
			borderThickness="1"
			>
		</mx:HBox>
	</com:TextPanel> 
	<!-- / Text panel for post-roll -->
	
	<mx:Fade 
		id="fadeOut"
		alphaFrom="1"
		alphaTo="0"
		duration="200"
		/>
	<mx:Fade 
		id="fadeIn"
		alphaFrom="0"
		alphaTo="1"
		duration="400"
		/>
</mx:Application>
