<?xml version="1.0" encoding="utf-8"?>
<!-- 
  Radio24syv
  Steffen Tiedemann Christensen, steffen@23company.com
-->
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:com="com.*" 
	xmlns:visual="com.visual.*"
	layout="absolute" 
	verticalScrollPolicy="off" 
	horizontalScrollPolicy="off"
	usePreloader="false"
	backgroundAlpha="0"
	width="100%" 
	height="100%" 
	creationComplete="init();"
	resize="resize();"
	>
 	<mx:Script source="Utility.as"></mx:Script>
 	<mx:Script source="Fullscreen.as"></mx:Script>
 	<mx:Script source="AppProperties.as"></mx:Script>
 	<mx:Script source="ActiveElement.as"></mx:Script>
 	<mx:Script source="doJSON.as"></mx:Script>
	<mx:Style>
		VScrollBar {
			downArrowUpSkin: Embed(source="assets/buttons/empty.png");
			downArrowOverSkin: Embed(source="assets/buttons/empty.png");
			downArrowDownSkin: Embed(source="assets/buttons/empty.png");
			upArrowUpSkin: Embed(source="assets/buttons/empty.png");
			upArrowOverSkin: Embed(source="assets/buttons/empty.png");
			upArrowDownSkin: Embed(source="assets/buttons/empty.png");
			thumbDownSkin: 
				Embed(source="assets/buttons/scrollbar-thumb.png",
				scaleGridLeft="7", scaleGridTop="5", 
				scaleGridRight="8", scaleGridBottom="7");
			
			thumbUpSkin: 
				Embed(source="assets/buttons/scrollbar-thumb.png",
				scaleGridLeft="7", scaleGridTop="5", 
				scaleGridRight="8", scaleGridBottom="7");
			
			thumbOverSkin: 
				Embed(source="assets/buttons/scrollbar-thumb.png",
				scaleGridLeft="7", scaleGridTop="5", 
				scaleGridRight="8", scaleGridBottom="7");
			
			trackSkin: 
				Embed(source="assets/buttons/scrollbar-track.png",
				scaleGridLeft="7", scaleGridTop="4", 
				scaleGridRight="8", scaleGridBottom="6" );       
		} 		
	</mx:Style>
	<mx:Script>
		<![CDATA[
			import com.PlayerButton;
			import com.SmoothImage;
			import com.adobe.serialization.json.JSONParseError;
			import com.philemonworks.flex.util.HashCollection;
			
			import flash.display.StageDisplayState;
			import flash.external.ExternalInterface;
			import flash.utils.setInterval;
			import flash.utils.setTimeout;
			
			// Default domain (used when testing from localhost)
			private var defaultDomain:String = 'arkiv.radio24syv.dk';
			// Default photo_id (used to if you want a specific photo/video to be shown, otherwise empty)
			private var defaultPhotoId:String = '';
			private var defaultAlbumId:String = '';
			private var playerId:String = '0';

			public var context:Object = {};
			private var recommendations:Object = {};
			
			[Bindable] private var cleanVideoState:String = 'paused';
			[Bindable] private var applicationLoaded:Boolean = false;
			[Bindable] private var _photos:Array = [];
			
			public function resize():void {
				try {
					applicationSmall.visible = false;
					applicationStandard.visible = false;
					applicationLarge.visible = false;
					if(this.height>=180) {
						applicationLarge.visible = true;	
					} else if(this.height>=120){
						applicationSmall.visible = true;
					} else {
						applicationStandard.visible = true;
					}
				}catch(e:Error){}
			}			
			public function init():void {
				prepareTimers();
				flash.system.Security.allowDomain('*');
				try {
					var objectID:String = new String(ExternalInterface.objectID);
					if (ExternalInterface.available && (objectID.length>0 && objectID!='null')) {
						ExternalInterface.addCallback('unloadVideoPlayer', function():void {unload();});
						ExternalInterface.addCallback('pauseVideo', function():void {pauseVideoElement();});
						ExternalInterface.addCallback('playVideo', function():void {playVideoElement();});
						ExternalInterface.addCallback('getPlayState', function():String {return(cleanVideoState);});
						ExternalInterface.addCallback('getPlayheadTime', function():Object {return(video.playheadTime + activeElement.getNumber('start'));});
						ExternalInterface.addCallback('setPlayheadTime', function(time:int):void {/*progress.seekVideoTo(time);*/});
						ExternalInterface.addCallback('getTotalTime', function():Object {return(video.totalTime);});
						ExternalInterface.addCallback('getCurrentPhotoID', function():Object {return(activeElement.get('photo_id'));});
						ExternalInterface.addCallback('getJSONSource', function():Object {return(props.get('jsonSource'));});
						ExternalInterface.addCallback('echo', function(x:Object):Object {return(x);});
					}
		        } catch (e:SecurityError) {} catch(e:Error) {}
				load();
			}
			public function unload():void {
				// This function is triggered via ExternalInterface and some JavaScript because Flex is useless.
				try {if(video.playing) video.pause();} catch(e:Error){}
				try {if(video.playing) reportPlay('end', video.playheadTime)} catch(e:Error){}
			}
			public function load():void {
				// Are we using a specific player, or just the default? (if so, we want to specify the player id to get the correct video settings)
				var testCustomPlayer:Array = new RegExp('/([0-9]+)\.swf').exec(FlexGlobals.topLevelApplication.url);
				if (testCustomPlayer && testCustomPlayer.length>1) playerId = testCustomPlayer[1]; 
				
				// Mash up embed parameters, including .swf?..., Flashvars, width and height to get a good embed code   
				var a:Array = []; var v:String;
				for (v in FlexGlobals.topLevelApplication.parameters) {a.push(encodeURIComponent(v) + '=' + encodeURIComponent(FlexGlobals.topLevelApplication.parameters[v]));}
				a.push('width=' + encodeURIComponent(FlexGlobals.topLevelApplication.width));
				a.push('height=' + encodeURIComponent(FlexGlobals.topLevelApplication.height));
				
				// Get settings for this player from 23 Video
				initLoadURL();
				doAPI('/api/player/settings', {player_id:(playerId?playerId:''), parameters:a.join('&')}, function(o:Object):void{
					initProperties(o.settings);

					// Load content
					initActiveElement();				
					doJSON((props.get('jsonSource') as String) + '&size=1', function(o:Object):void{
						var a = new Array();
						if(o.photos.length==0 || o.photos[0].album_id==3561248 || FlexGlobals.topLevelApplication.height<180 || !o.photos[0].title.match(/\([0-9]+\)/) ) {
							// Empty or Nyheder
							context=o; 
							_photos = context.photos;
							build();
							resize();
						} else {
							// Reload other episodes from the same day
							a.push('album_id=' + o.photos[0].album_id);
							a.push('year=' + o.photos[0].publish_date_ansi.substr(0,4));
							a.push('month=' + o.photos[0].publish_date_ansi.substr(5,2));
							a.push('day=' + o.photos[0].publish_date_ansi.substr(8,2));
							a.push('datemode=published');
							a.push('order=asc');
							doJSON(props.getString('jsonSource').replace(/token=/, 'ignore_token=').replace(/photo_id=/, 'ignore_photo_id=') + '&' + a.join('&'), function(o2:Object):void{
								if(o2&&o2.photos) {
									context=o2;
								} else {
									context=o;
								}
								_photos = context.photos;
								build();
								resize();
								
								// We may have loaded a clip, which was first in line
								if(FlexGlobals.topLevelApplication.parameters['photo_id']) {
									var p:String = FlexGlobals.topLevelApplication.parameters['photo_id'];
									for (var i:int = 0; i<context.photos.length; i++) {
										if(p==context.photos[i].photo_id) {
											setActiveElement(i, false, props.getNumber('start'));
											break;
										}
									}
								}
							});
						}
					});
				});
			}
			public function build():void {
				if(!prioritizeLiveStreams && context && context.photos && context.photos.length>0) setActiveElement(0, false, props.getNumber('start'));
				vc1.progress.placeGrid();
				vc2.progress.placeGrid();
				vc3.progress.placeGrid();
				applicationLoaded = true;
			}
			
            private function prepareTimers():void {
				// PLAY EVENTS
				// Report plays back to analytics continously
				setInterval(function():void{
						try {
							if(video.playing) reportPlay('start', video.playheadTime);
						}catch(e:ErrorEvent){}
					}, 15000);
            }             
			private function onVideoStateChange(evt:Event):void {
				if(evt.currentTarget.state==VideoEvent.PLAYING || evt.currentTarget.state==VideoEvent.SEEKING) {
					cleanVideoState = 'playing';
				} else if(evt.currentTarget.state==VideoEvent.LOADING || evt.currentTarget.state==VideoEvent.BUFFERING) {
					cleanVideoState = 'buffering';
				} else if(evt.currentTarget.state==VideoEvent.DISCONNECTED || evt.currentTarget.state==VideoEvent.COMPLETE || evt.currentTarget.state==VideoEvent.PAUSED || evt.currentTarget.state==VideoEvent.STOPPED) {
					cleanVideoState = 'paused';
				}
                switch (evt.currentTarget.state) {
                	case VideoEvent.PAUSED:
						reportPlay('end', video.playheadTime);
						break;
                	case VideoEvent.PLAYING:
						reportPlay('start', video.playheadTime);
                		break;
                    case VideoEvent.CONNECTION_ERROR:
                        displayError('Unable to connect to video');
                        break;
                }
            }
			private function onPlayheadUpdate():void {
				smallPlayheadTime.text = formatTime(video.playheadTime);
			}
            private function onVideoComplete(ignoreIdentity:Boolean=false):void {
				reportPlay('end', video.playheadTime);
				nextElement();
				playVideoElement();
            }
		]]>
	</mx:Script>	
	
	<!-- Simple element to provide a backdrop when everything else fails -->
	<mx:Label id="errorContainer" 
		color="white"
		/>
	
	<!-- Image and Video -->
	<visual:VisualVideo id="video"
		volume="1" 
		horizontalCenter="0" 
		verticalCenter="0" 
		bufferTime="10"
		width="100%"
		height="100%"
		click="if(video.playing) pauseVideoElement(); else playVideoElement();" 
		stateChange="onVideoStateChange(event);"
		complete="onVideoComplete();"
		playheadUpdate="onPlayheadUpdate();"
		visible="false"
		/>

	
	<!-- Small view -->
	<mx:Canvas id="applicationSmall" 
		y="0" 
		x="0" 
		width="180"
		height="120"
		horizontalScrollPolicy="off" 
		verticalScrollPolicy="off" 
		visible="false"
		>
		<mx:Image
			source="@Embed(source='assets/buttons/small-background.png')"
			/>
		
		<mx:Text
			y="5"
			x="60"
			color="#313030" 
			width="110" 
			fontFamily="Arial" 
			maxHeight="50" 
			fontSize="16" 
			text="{activeElement.getString('title')}" 
			/>

		<mx:VBox
			x="8"
			y="32"
			verticalGap="-5"
			>
			<com:PlayerButton
				width="30" height="30"
				imageSource="@Embed(source='assets/buttons/small-facebook.png')"
				hoverSource="@Embed(source='assets/buttons/small-facebook-hover.png')"
				toolTip="Del på Facebook"
				click="{shareFacebook();}"
				/>
			<com:PlayerButton
				width="30" height="30"
				imageSource="@Embed(source='assets/buttons/small-twitter.png')"
				hoverSource="@Embed(source='assets/buttons/small-twitter-hover.png')"
				toolTip="Del på Twitter"
				click="{shareTwitter();}"
				/>
			<com:PlayerButton
				width="30" height="30"
				imageSource="@Embed(source='assets/buttons/small-google.png')"
				hoverSource="@Embed(source='assets/buttons/small-google-hover.png')"
				toolTip="Del på Google+"
				click="{shareGoogle();}"
				/>
		</mx:VBox>

		<mx:HBox
			y="101"
			x="60"
			maxHeight="50"
			color="#999999" 
			horizontalGap="0"
			fontFamily="Verdana" 
			fontSize="9" 
			>
			<mx:Text text="{activeElement.getString('short_date')}" />
			<mx:Text text="|" />
			<mx:Text id="smallPlayheadTime" />
		</mx:HBox>
		
		
		<com:VideoControls
			id="vc1"
			y="34"
			x="78"
			video="{video}"
			cleanVideoState="{cleanVideoState}"
			playCallback="{playVideoElement}"
			pauseCallback="{pauseVideoElement}"
			photos="{_photos}"
			showProgress="false"
			showSmall="true"
			/>
	</mx:Canvas>
	
	<!-- Standard view -->
	<mx:Canvas id="applicationStandard" 
		y="0" 
		x="0" 
		width="340"
		height="76"
		horizontalScrollPolicy="off" 
		verticalScrollPolicy="off" 
		visible="false"
		>
		<com:VideoControls
			id="vc2"
			video="{video}"
			cleanVideoState="{cleanVideoState}"
			playCallback="{playVideoElement}"
			pauseCallback="{pauseVideoElement}"
			photos="{_photos}"
			/>
	</mx:Canvas>

	<!-- Large view -->
	<mx:Canvas id="applicationLarge" 
		y="0" 
		x="0" 
		width="350"
		height="210"
		horizontalScrollPolicy="off" 
		verticalScrollPolicy="off" 
		visible="false"
		>
		<mx:Image
			source="@Embed(source='assets/buttons/large-background.png')"
			/>
		<mx:Image
			x="17"
			y="13"
			source="@Embed(source='assets/buttons/large-image-frame.png')"
			/>
		<com:SmoothImage
			x="20"
			y="17"
			width="90"
			height="90"
			source="{(activeElement.get('album_id') ? 'http://arkiv.radio24syv.dk/files/podcastimage-'+activeElement.getString('album_id')+'.png' : '')}"
			/>

		<mx:VBox
			x="126"
			y="13"
			width="210"
			horizontalScrollPolicy="off" 
			verticalScrollPolicy="off" 
			fontFamily="Verdana"
			fontSize="11"
			verticalGap="-3"
			>
			<mx:Text color="#313030" width="210" fontFamily="Arial" maxHeight="60" fontSize="20" truncateToFit="true" text="{activeElement.getString('title')}"  paddingBottom="10" />
			<mx:Text color="#313030" width="210" maxHeight="36" text="{activeElement.getString('content')}" />
			<mx:Label color="#2F6B92" width="210" text="» Læs mere" useHandCursor="true" buttonMode="true" click="{lightbox.visible=true;}"  selectable="false"/>
			<mx:Label color="#757575" width="210" text="{activeElement.getString('date')}" />
		</mx:VBox>
		
		<com:VideoControls
			id="vc3"
			x="8"
			y="123"
			video="{video}"
			cleanVideoState="{cleanVideoState}"
			playCallback="{playVideoElement}"
			pauseCallback="{pauseVideoElement}"
			showTime="false"
			photos="{_photos}"
			/>
		
		<mx:HBox
			x="88"
			y="181"
			horizontalGap="17"
			>
			<mx:Image
				source="@Embed(source='assets/buttons/large-facebook.png')"
				buttonMode="true"
				useHandCursor="true"
				toolTip="Del på Facebook"
				click="{shareFacebook();}"
				/>
			<mx:Image
				source="@Embed(source='assets/buttons/large-twitter.png')"
				buttonMode="true"
				useHandCursor="true"
				toolTip="Del på Twitter"
				click="{shareTwitter();}"
				/>
			<mx:Image
				source="@Embed(source='assets/buttons/large-google.png')"
				buttonMode="true"
				useHandCursor="true"
				toolTip="Del på Google+"
				click="{shareGoogle();}"
				/>
			<mx:Image
				source="@Embed(source='assets/buttons/large-logo.png')"
				buttonMode="true"
				useHandCursor="true"
				toolTip="Besøg Radio24syv"
				click="{goToUrl('http://www.radio24syv.dk', '_new');}"
				/>
		</mx:HBox>
		
		<mx:Canvas 
			id="lightbox"
			visible="false"
			width="100%"
			height="100%"
			>
			<mx:Image
				source="@Embed(source='assets/buttons/lightbox.png')"
				click="{lightbox.visible=false;}"
				/>
			<mx:TextArea
				color="#313030"  
				fontFamily="Verdana"
				borderStyle="none"
				focusEnabled="false"
				editable="false"
				fontSize="12"
				top="13"
				left="26"
				right="22"
				bottom="12"
				paddingTop="14"
				paddingBottom="14"
				paddingRight="10"
				backgroundAlpha="0"
				text="{activeElement.getString('content')}"
				/>
		</mx:Canvas>

	</mx:Canvas>
	

</mx:Application>
