<?xml version="1.0" encoding="utf-8"?>
<!-- 
  Onside Player for 23 Video
  Steffen Tiedemann Christensen, steffen@23company.com
  Dis/play
-->
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:com="com.*" 
	xmlns:visual="com.visual.*"
	layout="absolute" 
	verticalScrollPolicy="off" 
	horizontalScrollPolicy="off"
	usePreloader="false" 
	backgroundAlpha="0"
	width="100%" 
	height="100%" 
	creationComplete="init();"
	>
 	<mx:Script source="Utility.as"></mx:Script>
 	<mx:Script source="Fullscreen.as"></mx:Script>
 	<mx:Script source="AppProperties.as"></mx:Script>
 	<mx:Script source="ActiveElement.as"></mx:Script>
 	<mx:Script source="doJSON.as"></mx:Script>
	<mx:Script>
		<![CDATA[
			import com.PlayList;
			import com.PlayListEvent;
			import com.PlayerButton;
			import com.SmoothImage;
			import com.adobe.serialization.json.JSONParseError;
			import com.philemonworks.flex.util.HashCollection;
			import com.visual.VisualAds;
			
			import flash.display.StageDisplayState;
			import flash.external.ExternalInterface;
			import flash.utils.setInterval;
			import flash.utils.setTimeout;
			
			// Default domain (used when testing from localhost)
			private var defaultDomain:String = 'onside.23video.com';
			// Default photo_id (used to if you want a specific photo/video to be shown, otherwise empty)
			private var defaultPhotoId:String = '';
			private var defaultAlbumId:String = '';
			private var playerId:String = '0';

			private var context:Object = {};
			private var recommendations:Object = {};
			
			private var playList: PlayList;
			[Bindable] private var enablePlayList: Boolean = false;		
			[Bindable] private var showPlayList: Boolean = false;
			[Bindable] private var cleanVideoState:String = 'paused';
			[Bindable] private var applicationLoaded:Boolean = false;
			public var ads = null;
			public var forceHideTray:Boolean = false;
			
			public function init():void {
				prepareTimers();
				flash.system.Security.allowDomain('*');
				try {
					var objectID:String = new String(ExternalInterface.objectID);
					if (ExternalInterface.available && (objectID.length>0 && objectID!='null')) {
						ExternalInterface.addCallback('unloadVideoPlayer', function():void {unload();});
						ExternalInterface.addCallback('pauseVideo', function():void {pauseVideoElement();});
						ExternalInterface.addCallback('playVideo', function():void {playVideoElement();});
						ExternalInterface.addCallback('getPlayState', function():String {return(cleanVideoState);});
						ExternalInterface.addCallback('getPlayheadTime', function():Object {return(video.playheadTime + activeElement.getNumber('start'));});
						ExternalInterface.addCallback('setPlayheadTime', function(time:int):void {progress.seekVideoTo(time);});
						ExternalInterface.addCallback('getTotalTime', function():Object {return(video.totalTime);});
						ExternalInterface.addCallback('getCurrentPhotoID', function():Object {return(activeElement.get('photo_id'));});
						ExternalInterface.addCallback('getJSONSource', function():Object {return(props.get('jsonSource'));});
						ExternalInterface.addCallback('echo', function(x:Object):Object {return(x);});
					}
		        } catch (e:SecurityError) {} catch(e:Error) {}
				load();
			}
			public function unload():void {
				// This function is triggered via ExternalInterface and some JavaScript because Flex is useless.
				try {if(video.playing) video.pause();} catch(e:Error){}
				try {if(video.playing) reportPlay('end', video.playheadTime)} catch(e:Error){}
			}
			public function load():void {
				// Are we using a specific player, or just the default? (if so, we want to specify the player id to get the correct video settings)
				var testCustomPlayer:Array = new RegExp('/([0-9]+)\.swf').exec(FlexGlobals.topLevelApplication.url);
				if (testCustomPlayer && testCustomPlayer.length>1) playerId = testCustomPlayer[1]; 
				
				// Mash up embed parameters, including .swf?..., Flashvars, width and height to get a good embed code   
				var a:Array = []; var v:String;
				for (v in FlexGlobals.topLevelApplication.parameters) {a.push(encodeURIComponent(v) + '=' + encodeURIComponent(FlexGlobals.topLevelApplication.parameters[v]));}
				a.push('width=' + encodeURIComponent(FlexGlobals.topLevelApplication.width));
				a.push('height=' + encodeURIComponent(FlexGlobals.topLevelApplication.height));
				
				// Get settings for this player from 23 Video
				initLoadURL();
				doAPI('/api/player/settings', {player_id:(playerId?playerId:''), parameters:a.join('&')}, function(o:Object):void{
					initProperties(o.settings);

					// Load content
					initActiveElement();
					doJSON((props.get('jsonSource') as String), function(o:Object):void{
						context=o; 
						build();
					});
				});
			}
			public function build():void {
				if(!prioritizeLiveStreams && context && context.photos && context.photos.length>0) setActiveElement(0, false, props.getNumber('start'));
				
				if (props.get('showTray') && props.get('showBrowse')) {
					// Generate the recommendation playlist
					var recommendationSource:String = getRecommendationSource();
					if(recommendationSource==props.get('jsonSource')) {
						// The list displays all the items in the feed
						recommendations=context; createPlayList();
					} else {
						// The list consists of recommendations, we'll need to load them
						// Loading is deferred for a few seconds if browseMode isn't on 
						setTimeout(function():void {
							try {
								doJSON(recommendationSource, function(o:Object):void{recommendations=o; createPlayList();});
					        } catch(e:JSONParseError) {enablePlayList = false; props.put('showShare', false);}
						}, (props.getBoolean('browseMode') ? 0 : 5000));
					}
				}
	
				this.visible = true;
				if (context&&context.photos&&context.photos.length>0) {
					applicationLoaded = true;
				} else {
					displayError('No video to play');				
				}
			}
			
            private function createPlayList():void  {
            	var arr:Array = createItemsArray(recommendations);
            	if(arr.length<=1) return;
				enablePlayList = true;
				playListHolder.removeAllChildren(); // if we've done this before, clean up after ourselves.
            	playList = new PlayList();
            	playList.width = playListContainer.width;
            	playList.verticalScrollPolicy = "off";
				playList.itemArray = arr;
				playList.addEventListener(PlayListEvent.SELECT_ITEM, function(evt:PlayListEvent):void {
						// When clicking the recommendation playlist, we shift context -- it's no longer the initially selected video, but the playlist objects
						context = recommendations;
						if(evt.itemID>=0) {
							if(props.get('playlistClickMode')=='link') {
								if (context.photos.length>evt.itemID) {
									var o:Object = context.photos[evt.itemID];
									goToUrl(o.one);
								}
							} else {
            					playListHide();
            					setElementByID(evt.itemID, true);
							}
            			}
            		});
				playListHolder.addChild(playList);
				
				if(props.get('browseMode')) {
					showPlayList = true;
				}
            }
			private function playListShow():void {
				if (!props.get('showTray') || !props.get('showBrowse')) return;
				embedPanel.visible = false;
				showPlayList = true;
            }
			private function playListHide():void {
				showPlayList = false;
            }
            private function prepareTimers():void {
				// PLAY EVENTS
				// Report plays back to analytics continously
				setInterval(function():void{
						try {
							if(video.playing) reportPlay('start', video.playheadTime);
						}catch(e:ErrorEvent){}
					}, 30000);
            }             
            private function onPlayListDone():void {
            	if(props.get('loop')) { 
            		load();
            	} else {
            		if (playList) {
            			playListShow();
            		}
            	}
            }
			private function onVideoStateChange(evt:Event):void {
				embedPanel.visible = false;
				if(evt.currentTarget.state==VideoEvent.PLAYING || evt.currentTarget.state==VideoEvent.SEEKING) {
					if(ads) ads.overlay();
					cleanVideoState = 'playing';
					playListHide()
				} else if(evt.currentTarget.state==VideoEvent.LOADING || evt.currentTarget.state==VideoEvent.BUFFERING) {
					cleanVideoState = 'buffering';
					playListHide()
				} else if(evt.currentTarget.state==VideoEvent.DISCONNECTED || evt.currentTarget.state==VideoEvent.COMPLETE || evt.currentTarget.state==VideoEvent.PAUSED || evt.currentTarget.state==VideoEvent.STOPPED) {
					cleanVideoState = 'paused';
					playListShow();
				}
                switch (evt.currentTarget.state) {
                	case VideoEvent.PAUSED:
						reportPlay('end', video.playheadTime);
						break;
                	case VideoEvent.PLAYING:
						image.visible = false;
						reportPlay('start', video.playheadTime);
                		break;
                    case VideoEvent.CONNECTION_ERROR:
                        displayError('Unable to connect to video');
                        break;
                }
            }
            private function onVideoComplete(ignoreIdentity:Boolean=false):void {
				reportPlay('end', video.playheadTime);
            	if(props.get('loop')) {
            		var more:Boolean = nextElement();
            		if(!more) onPlayListDone();
            	} else {
            		onPlayListDone();
            	}
            }
            private function onPlayListResize():void {
            	var c:Array = playListHolder.getChildren();
            	if (c.length) c[0].width = playListContainer.width;
            }
            private function onTrayResize():void {
            	resizeProgressBar();
            }
            private function resizeProgressBar():void {
            }
		]]>
	</mx:Script>	
	
	<!-- Simple element to provide a backdrop when everything else fails -->
	<mx:Canvas id="errorContainer" backgroundColor="black" top="0" left="0" width="100%" height="100%" visible="false">
		<mx:Label id="errorText" color="white" />
	</mx:Canvas>
	
	<mx:Canvas id="contentContainer"
		x="{props.getNumber('horizontalPadding')/2}"
		y="0"
		width="{FlexGlobals.topLevelApplication.width-props.getNumber('horizontalPadding')}"
		height="{FlexGlobals.topLevelApplication.height-props.getNumber('verticalPadding')}"
		verticalScrollPolicy="off"
		horizontalScrollPolicy="off"
		>
	<!-- Click Container when wmode='direct' -->
	<mx:Canvas 
		top="0" right="0" bottom="0" left="0"
		click="playListHide(); if(video.playing) pauseVideoElement(); else playVideoElement();"
		/>
	<!-- Image and Video -->
	<visual:VisualVideo id="video"
		volume="1" 
		horizontalCenter="0" 
		verticalCenter="0" 
		bufferTime="10"
		width="100%"
		height="100%"
		click="playListHide(); if(video.playing) pauseVideoElement(); else playVideoElement();" 
		stateChange="onVideoStateChange(event);"
		complete="onVideoComplete();"
		/>
	<com:SmoothImage id="image" 
		source="{activeElement.get('photoSource')}" 
		width="{(contentContainer.width/contentContainer.height>activeElement.get('aspectRatio') ? video.height*(activeElement.get('aspectRatio') as Number) : contentContainer.width)}"
		height="{(contentContainer.width/contentContainer.height>activeElement.get('aspectRatio') ? contentContainer.height : contentContainer.width/(activeElement.get('aspectRatio') as Number))}"
		horizontalCenter="0" 
		verticalCenter="0"
		click="{playListHide(); playVideoElement()}" 
		/>

	<!-- Icon/Logo -->
	<mx:Image id="logo" 
		source="@Embed(source='assets/buttons/logo.png')"
		top="20"
		left="20"
		/> 
		
	</mx:Canvas> 

	<mx:Canvas id="visualAdContainer" 
			   horizontalScrollPolicy="off"
			   verticalScrollPolicy="off"
			   clipContent="true"
			   width="100%" 
			   height="{FlexGlobals.topLevelApplication.height}" /> 
	<com:OverlayMessage id="adMessage"
			   fontFamily="{props.get('trayFont')}" 
			   color="{(styleManager.getColorName(props.get('trayTextColor')) as Number)}" 
			   backgroundColor="{(styleManager.getColorName(props.get('trayBackgroundColor')) as Number)}" 
			   allowClose="{props.get('identityAllowClose')}"
			   visible="false"
			   />
	<!-- PlayList -->
	<mx:Canvas id="playListContainer"
			   width="{tray.width}"
			   bottom="65"
			   height="165"
			   backgroundColor="black"
			   backgroundAlpha=".7"
			   verticalScrollPolicy="off" 
			   horizontalScrollPolicy="off" 
			   visible="{showPlayList}"
			   >
		<mx:Canvas id="playListHolder" 
				   top="27"
				   left="30"
				   height="127"
				   right="0"
				   verticalScrollPolicy="off" 
				   horizontalScrollPolicy="off" 
				   resize="onPlayListResize()"
				   />
	</mx:Canvas>					

	
	<!-- Tray -->
	<mx:Canvas id="tray" 
		bottom="0" 
		left="0"
		height="65"
		width="{FlexGlobals.topLevelApplication.width}" 
		horizontalScrollPolicy="off" 
		verticalScrollPolicy="off" 
		resize="onTrayResize();" 
		horizontalCenter="0"
		>
		<mx:Image 
			maintainAspectRatio="false"
			source="@Embed('assets/buttons/tray-background.png', scaleGridTop='19', scaleGridBottom='20', scaleGridLeft='100', scaleGridRight='110')"
			bottom="0" 
			left="0"
			height="65"
			right="0"
			/>

		<!-- Play and Pause -->
		<mx:HBox id="videoControls" 
			top="15" 
			left="16" 
			width="{playImage.width}"
			hasFocusableChildren="true"
			resize="resizeProgressBar();">
    		<com:PlayerButton id="playImage" 
    			imageSource="@Embed(source='assets/buttons/play.png')"
				activeSource="@Embed(source='assets/buttons/play-active.png')"
    			visible="{(cleanVideoState=='paused')}" 
    			click="playVideoElement()"
				height="38"
				width="38"
    			/>
    		<com:PlayerButton id="pauseImage" 
			    imageSource="@Embed(source='assets/buttons/pause.png')"
			    activeSource="@Embed(source='assets/buttons/pause-active.png')"
    			visible="{(cleanVideoState!='paused')}" 
    			click="pauseVideoElement()"
				height="38"
				width="38"
    			/>
    	</mx:HBox>					
						
		<!-- Progress bar -->
		<com:PlayerProgress id="progress"
			top="30"
			left="78"
			width="{FlexGlobals.topLevelApplication.width-309}"
			targetVideo="{video}"
			/>

		<!-- Right Panel -->
    	<mx:HBox id="rightPanel" 
    		top="22" 
    		right="22" 
    		horizontalGap="4" 
    		resize="resizeProgressBar();"
    		> 
			<!-- Share -->
			<com:PlayerButton 
				 imageSource="@Embed(source='assets/buttons/share.png')"
				 activeSource="@Embed(source='assets/buttons/share-active.png')"
				 click="{embedPanel.visible = !embedPanel.visible;}"
				 visible="false"
				 />
			<!-- Twitter -->
			<com:PlayerButton 
				imageSource="@Embed(source='assets/buttons/twitter.png')"
				activeSource="@Embed(source='assets/buttons/twitter-active.png')"
				click="{goToUrl(activeElement.get('link') + '/twitter?player_id=' + props.get('player_id'))}"
				/>
			<!-- Facebook -->
			<com:PlayerButton 
				 imageSource="@Embed(source='assets/buttons/facebook.png')"
				 activeSource="@Embed(source='assets/buttons/facebook-active.png')"
				 click="{goToUrl(activeElement.get('link') + '/facebook?player_id=' + props.get('player_id'))}"
				 />
			<!-- Mute and Unmute -->
			<com:PlayerButton 
				imageSource="@Embed(source='assets/buttons/sound.png')"
				activeSource="@Embed(source='assets/buttons/sound-active.png')"
				click="video.volume=0"
				visible="{video.volume>0}"
				/>
			<com:PlayerButton 
				imageSource="@Embed(source='assets/buttons/mute.png')"
				activeSource="@Embed(source='assets/buttons/mute-active.png')"
				click="video.volume=1"
				visible="{video.volume==0}"
				/>
			<!-- Fullscreen -->
    		<com:PlayerButton  
				 imageSource="@Embed(source='assets/buttons/fullscreen.png')"
				 activeSource="@Embed(source='assets/buttons/fullscreen-active.png')"
	    		 click="toggleFullScreen()"
	    		 />
		</mx:HBox>
	</mx:Canvas>
	
	<!-- Embed panel -->
	<mx:Canvas
		id="embedPanel"
		backgroundColor="black"
		backgroundAlpha=".7"
		bottom="65"
		width="100%"
		height="120"
		show="{reportEvent('shareEngaged');}"
		visible="false"
		>
		<mx:Label 
			text="Embed video"
			color="white"
			fontFamily="'Trebuchet MS', Trebuchet MS, Trebuchet, Helvetica, Arial"
			fontSize="20"
			top="20"
			left="20"
			/>
		
		<mx:Image 
			maintainAspectRatio="false"
			source="@Embed('assets/buttons/share-background.png', scaleGridTop='19', scaleGridBottom='20', scaleGridLeft='100', scaleGridRight='110')"
			click="{reportEvent('embedEngaged'); System.setClipboard(embedText.text);}"
			top="54"
			left="20"
			right="20"
			/>
		<mx:TextArea id="embedText" 
					 top="64"
					 left="25"
					 right="80"
					 height="22"
					 borderThickness="0"
					 text="{props.get('currentVideoEmbedCode')}" 
					 click="{reportEvent('embedEngaged'); embedText.setFocus(); embedText.selectionBeginIndex = 0; embedText.selectionEndIndex = embedText.text.length;}" 
					 color="#333" 
					 backgroundColor="white"
					 fontSize="11" 
					 />

	</mx:Canvas>	
</mx:Application>
